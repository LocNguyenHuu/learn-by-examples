q()
campaign1<-data.frame(click=c(1,1,1,1,1,1,0,0,0,0), f1=c(33,22,17,23,41,26,110,121,99,103), f2=c(1,1,1,1,0,1,0,0,0,0), f3=c(0.3,0.1,0.2,0.23,0.12,0.25,1.1,0.98,0.993,1.13))
campaign2<-data.frame(click=c(0,0,0,0,0,0,1,1,1,1), f1=c(31.2,26,15,23.4,32,27,201,190,166,193), f2=c(1,0,1,1,0,1,0,0,0,0), f3=c(0.03,0.23,0.12,0.18,0.09,0.21,2.1,2.7,1.99,2.34))
campaign3<-data.frame(click=c(0,0,0,0,0,0,1,1,1,1), f1=c(33,12,17,23,22,36,177,181,189,173), f2=c(1,1,0,1,0,1,0,0,0,0), f3=c(0.14,0.3,0.2,0.12,0.12,0.25,1.7,2.98,1.993,1.97))
campaign4<-data.frame(click=c(1,1,1,1,1,1,0,0,0,0), f1=c(24,25.5,19,21,38,50,102,97,100,111), f2=c(1,1,1,0,0,1,0,0,0,1), f3=c(0.2,0.4,0.22,0.43,0.15,0.25,1.21,01.09,0.89,1.22))
View(campaign1)
library(reshape)
library(ggplot2)
library(ggthemes)
library(scales)
max.yrs <- 3  	# max number of years to show on plot
max.benefit <- 1.5	# year at which employee delivers fully-trained value (asymptote)
cost.ramp <- 1.5	# higher numbers speed up time before costs = salary
cost.scale <- 3		# higher numbers increase height of original training costs
salary <- 0.5		# monthly salary as a percent of fully trained value delivered to company
# set up data frame with time series in months
emp.value <- as.data.frame(0:(max.yrs*12)/12)
names(emp.value)<- "tenure.yrs"
# set up data frame with time series in months
emp.value <- as.data.frame(0:(max.yrs*12)/12)
names(emp.value)<- "tenure.yrs"
# set up benefit function, modeled as a sigmoid
emp.value$benefit <- 1/(1+exp(-(emp.value$tenure.yrs/max.benefit*12-6)))
# set up cost function, modeled as a gompertz
emp.value$cost <- exp(-exp(cost.ramp * emp.value$tenure.yrs)) * cost.scale + salary
# calc breakeven points
be.mon.id <- which.max((emp.value$benefit - emp.value$cost)>0)
be.mon <- emp.value$tenure.yrs[be.mon.id]
be.cume.id <- which.max(cumsum(emp.value$benefit - emp.value$cost)>0)
be.cume <- emp.value$tenure.yrs[be.cume.id]
writeLines(sprintf("At this rate net benefit begins at year %.2f, breakeven at year %.2f", be.mon, be.cume))
# plot time vs. monthly cost, benefit
fig1<-ggplot(data=melt(emp.value, id.vars="tenure.yrs"), aes(x=tenure.yrs, y=value, col=variable)) +
geom_hline(yintercept=1, size=1, linetype="dashed", col="white") +
geom_line(size=1) +
annotate("text",
x=emp.value$tenure.yrs[be.mon.id]+0.02,
y=emp.value$cost[be.mon.id],
color=economist_pal()(6)[6],
label="Monthly Breakeven",
hjust=0, vjust=0) +
annotate("text",
x=emp.value$tenure.yrs[be.cume.id],
y=emp.value$cost[be.cume.id],
color=economist_pal()(6)[6],
label="Cumulative\nBreakeven",
hjust=0) +
scale_y_continuous(labels = percent) +
theme_economist(horizontal=FALSE) +
scale_colour_economist(name="") +
labs(title="Monthly Benefit & Cost from One Employee",
x="Tenure in Years",
y="% Potential Monthly Value")
print(fig1)
# plot time vs. net monthly benefit
fig2<-ggplot(data=emp.value, aes(x=tenure.yrs)) +
geom_line(col=economist_pal()(1), size=1, aes(y=benefit-cost)) +
geom_hline(yintercept=0, size=1, linetype="dashed", col="white") +
scale_y_continuous(labels = percent) +
theme_economist(horizontal=FALSE) +
scale_colour_economist() +
labs(title="Net Monthly Benefit from One Employee",
x="Tenure in Years",
y="Net Monthly Benefit (in % Potential)")
print(fig2)
# plot time vs cumulative benefit
fig3<-ggplot(data=emp.value, aes(x=tenure.yrs)) +
geom_line(col=economist_pal()(1), size=1, aes(y=cumsum(benefit-cost))) +
geom_hline(yintercept=0, size=1, linetype="dashed", col="white") +
scale_y_continuous(labels = percent) +
theme_economist(horizontal=FALSE) +
scale_colour_economist() +
labs(title="Cumulative Benefit from One Employee",
x="Tenure in Years",
y="Cumulative Value (in % Potential)")
print(fig3)
secondsCall <- c(23,28,39,48,64,75,88,96,97,109,118,149,150,156,165)
dollarProfit <- c(1,2,3,3,4,4,5,6,6,7,8,8,9,10,10)
plot(secondsCall,dollarProfit)
model <- lm(secondsCall ~ dollarProfit)
model
summary(model)
abline(model)
plot(secondsCall,dollarProfit)
abline(model)
predict(model,newdata=data.frame(dollarProfit=5))
predict(model,newdata=data.frame(dollarProfit=5),interval="pred")
predict(model,newdata=data.frame(dollarProfit=5),interval="confidence")
clicks <- read.csv("/media/eliasah/Transcend/workspace/igraal/igraal-ml/recommender-standalone/data/clicks.csv")
View(clicks)
library(SparkR)
sc <- sparkR.init(appName = "SparkR-Voucher-Ranking")
sparkR.stop
sparkR.stop()
Sys.env(SPARK_HOME="/home/eliasah/utils/spark/spark-1.5.2-bin-hadoop2.6/")
Sys.setenv('SPARKR_SUBMIT_ARGS'='"--packages" "com.databricks:spark-csv_2.10:1.2.0" "sparkr-shell"')
Sys.setenv(SPARK_HOME="/home/eliasah/utils/spark/spark-1.5.2-bin-hadoop2.6/")
Sys.setenv('SPARKR_SUBMIT_ARGS'='"--packages" "com.databricks:spark-csv_2.10:1.2.0" "sparkr-shell"')
# This line loads SparkR from the installed directory
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"), .libPaths()))
# Load the SparkR library
library(SparkR)
# Initialize SparkContext and SQLContext
sc <- sparkR.init(master="spark://AH-PC:7077", appName="SparkR-DataFrame-example")
sqlContext <- sparkRSQL.init(sc)
clicks = read.df(sqlContext, path="/media/eliasah/Transcend/workspace/igraal/igraal-ml/recommender-standalone/data/clicks.csv",header="true")
showDF(clicks)
View(clicks)
vouchers <- filter(clicks, clicks$marketObjectType = "vouchers")
vouchers <- filter(clicks, clicks$marketObjectType $= "vouchers")
vouchers <- filter(clicks, clicks$marketObjectType == "vouchers")
sqlContext
sparkR.stop
sparkR.stop()
View(clicks)
Sys.setenv(SPARK_HOME="/home/eliasah/utils/spark/spark-1.5.2-bin-hadoop2.6/")
Sys.setenv('SPARKR_SUBMIT_ARGS'='"--packages" "com.databricks:spark-csv_2.10:1.2.0" "sparkr-shell"')
# This line loads SparkR from the installed directory
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"), .libPaths()))
# Load the SparkR library
library(SparkR)
# Initialize SparkContext and SQLContext
sc <- sparkR.init(master="spark://AH-PC:7077", appName="SparkR-DataFrame-example")
sparkR.stop()
sparkR.stop()
q()
setwd("~/Desktop/R")
getwd()
HeartDisease <- read.csv("~/Desktop/R/SAheart.data.txt")
View(HeartDisease)
str(HeartDisease)
attach(HeartDisease)
names(HeartDisease)
base = subset(HeartDisease, select = c(chd, age, tobacco, sbp, famhist, alcohol, obesity, ldl, adiposity, typea))
head(base)
tail(base)
str(base)
str(HeartDisease)
str(base)
str(HeartDisease)
summary(base)
base$chd <- factor(base$chd)
summary(base)
base <- na.omit(base)
attach(base)
hist(x = age, col = "lightblue", main = "Age", xlab = "", ylab = "")
par(mfrow = c(3, 2))
hist(x = age, col = "lightblue", main = "Age", xlab = "", ylab = "")
hist(x = sbp, col = "orange", main = "pression sanguine systolique", xlab = "", ylab = "")
hist(x = alcohol, col = "red", main = "Consommation cour. d'alcool", xlab = "", ylab = "")
hist(x = tobacco, col = "violet", main = "Qté de tabac cumulée", xlab = "", ylab = "")
hist(x = ldl, col = "green2", main = "taux de cholesterol", xlab = "", ylab = "")
hist(x = obesity, col = "slategray", main = "Obésité", xlab = "", ylab = "")
par(mfrow = c(1, 1))
pairs(base, col = base$chd)
par(mfrow = c(1, 2))
require(ggplot2)
qplot(alcohol, tobacco, data = base, facets = chd ~ .)
detach(HeartDisease)
attach(base)
summary(base)
Breaksage = c(0, 15, 25, 45, max(age))
age.d = cut(age, breaks = Breaksage, include.lowest = TRUE)
summary(age.d)
Breakstop = c(0,0.05,2, max(tobacco))
tobacco.d = cut(tobacco, breaks = Breakstob, include.lowest = TRUE)
summary(tobacco.d)
Breakstop = c(0,0.05,2, max(tobacco))
tobacco.d = cut(tobacco, breaks = Breakstob, include.lowest = TRUE)
summary(tobacco.d)
Breakstop = c(0,0.05,2, max(tobacco))
Breakstop = c(0,0.05,2, max(tobacco))
tobacco.d = cut(tobacco, breaks = Breakstob, include.lowest = TRUE)
Breakstob = c(0,0.05,2, max(tobacco))
tobacco.d = cut(tobacco, breaks = Breakstob, include.lowest = TRUE)
summary(tobacco.d)
base2 <- cbind(base, age.d, tobacco.d)
detach(base)
attach(base2)
xtabs(~chd + age.d, data = base2)
xtabs(~chd + famhist, data = base2)
xtabs(~chd + tobacco.d, data = base2)
base3 <- subset(x = base2, subset = (age > 15))
detach(base2)
attach(base3)
base3 <- subset(base3, select = -c(age, tobacco))
summary(base3)
# Tirage aléaoire et sans remise des 65% des individus de l'échantillon On
# initialise le tirage aléatoire afin de retomber sur nos pieds à chaque
# fois
set.seed(111)
d = sort(sample(nrow(base3), nrow(base3) * 0.65))
# Echantillon d'apprentissage
appren <- base3[d, ]
# Echantillon de test
test <- base3[-d, ]
summary(appren)
summary(test)
attach(appren)
str(appren)
# modèle trivial réduit à la constante
str_constant <- "~ 1"
# modèle complet incluant toutes les explicatives potentielles
str_all <- "~sbp+famhist+alcohol+obesity+ldl+adiposity+typea+age.d+tobacco.d"
require(MASS)
modele <- glm(chd ~ 1, data = appren, family = binomial)
modele.forward <- stepAIC(modele, scope = list(lower = str_constant, upper = str_all),
trace = TRUE, data = appren, direction = "forward")
# affichage du modèle final
summary(modele.forward)
modele <- glm(chd ~ 1, data = appren, family = binomial)
modele.stepwise <- stepAIC(modele, scope = list(lower = str_constant, upper = str_all),
trace = TRUE, data = appren, direction = "both")
# affichage du modèle final
summary(modele.stepwise)
